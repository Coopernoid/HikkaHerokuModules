import logging
import os
import textwrap
import requests
from PIL import Image, ImageDraw, ImageFont
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class SkalanizatorMod(loader.Module):
    """–°–∫–∞–ª–∞–Ω–∏–∑–∞—Ç–æ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏"""

    strings = {"name": "–°–∫–∞–ª–∞–Ω–∏–∑–∞—Ç–æ—Ä"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "FONT_PATH", "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", "–ü—É—Ç—å –¥–æ —à—Ä–∏—Ñ—Ç–∞"
        )
        self.images = []

    async def client_ready(self, client, db):
        # –ù–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º –≤ —á–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        pass

    async def jhelpcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –°–∫–∞–ª–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
        text = (
            "ü™ê –°–∫–∞–ª–∞–Ω–∏–∑–∞—Ç–æ—Ä v1.1 (‚úø‚ó†‚Äø‚ó†)\n"
            "‚ñ´Ô∏è .j [–Ω–æ–º–µ—Ä (–æ–ø—Ü.)] [—Ç–µ–∫—Å—Ç/—Ä–µ–ø–ª–∞–π] ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–µ–º\n"
            "‚ñ´Ô∏è .jadd <—Å—Å—ã–ª–∫–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
            "‚ñ´Ô∏è .jclear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫\n"
            "‚ñ´Ô∏è .jdel <–Ω–æ–º–µ—Ä/–¥–∏–∞–ø–∞–∑–æ–Ω> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
            "‚ñ´Ô∏è .jlist ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫\n"
        )
        await utils.answer(message, text)

    def _add_text(self, img_path, text):
        img = Image.open(img_path).convert("RGB")
        draw = ImageDraw.Draw(img)

        try:
            font = ImageFont.truetype(self.config["FONT_PATH"], size=40)
        except Exception:
            font = ImageFont.load_default()

        # –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        max_width = img.width - 40
        lines = []
        for line in text.split("\n"):
            wrapped = textwrap.wrap(line, width=40)
            lines.extend(wrapped if wrapped else [""])

        # –í—ã—Å–æ—Ç–∞ –≤—Å–µ–≥–æ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
        line_height = font.getbbox("A")[3] - font.getbbox("A")[1] + 5
        total_height = line_height * len(lines)

        y = img.height - total_height - 20
        for line in lines:
            w = font.getlength(line)
            x = (img.width - w) / 2
            draw.text((x, y), line, font=font, fill="white", stroke_width=2, stroke_fill="black")
            y += line_height

        out_path = "/tmp/out.jpg"
        img.save(out_path, "JPEG")
        return out_path

    async def jcmd(self, message):
        """[–Ω–æ–º–µ—Ä (–æ–ø—Ü.)] [—Ç–µ–∫—Å—Ç/—Ä–µ–ø–ª–∞–π] ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–µ–º"""
        args = utils.get_args_raw(message).split(maxsplit=1)

        if args and args[0].isdigit():
            idx = int(args[0]) - 1
            text = args[1] if len(args) > 1 else ""
        else:
            idx = 0
            text = args[0] if args else ""

        reply = await message.get_reply_message()
        if reply and not text:
            text = reply.raw_text or ""

        if not self.images:
            await utils.answer(message, "üö´ –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ .jadd <—Å—Å—ã–ª–∫–∞>")
            return

        if idx < 0 or idx >= len(self.images):
            await utils.answer(message, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏")
            return

        img_path = self._download_image(self.images[idx])
        out_path = self._add_text(img_path, text or "")
        await message.respond(file=out_path, reply_to=reply.id if reply else None)
        await message.delete()

    async def jaddcmd(self, message):
        """<—Å—Å—ã–ª–∫–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"""
        url = utils.get_args_raw(message)
        if not url:
            await utils.answer(message, "üö´ –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É")
            return
        self.images.append(url)
        await utils.answer(message, f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(self.images)}")

    async def jlistcmd(self, message):
        """–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        if not self.images:
            await utils.answer(message, "üö´ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return
        out = "üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫:\n\n"
        for i, url in enumerate(self.images, start=1):
            out += f"{i}. {url}\n"
        await utils.answer(message, out)

    async def jclearcmd(self, message):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        self.images.clear()
        await utils.answer(message, "üóë –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—á–∏—â–µ–Ω")

    async def jdelcmd(self, message):
        """<–Ω–æ–º–µ—Ä/–¥–∏–∞–ø–∞–∑–æ–Ω> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "üö´ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            if "-" in args:
                start, end = map(int, args.split("-"))
                del self.images[start - 1:end]
                await utils.answer(message, f"üóë –£–¥–∞–ª–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å {start} –ø–æ {end}")
            else:
                idx = int(args) - 1
                url = self.images.pop(idx)
                await utils.answer(message, f"üóë –ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {url}")
        except Exception:
            await utils.answer(message, "üö´ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä.")

    def _download_image(self, url):
        r = requests.get(url, stream=True)
        if r.status_code != 200:
            raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        img_path = "/tmp/input.jpg"
        with open(img_path, "wb") as f:
            for chunk in r.iter_content(1024):
                f.write(chunk)
        return img_path